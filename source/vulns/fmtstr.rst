格式化字符串
================================

概述
--------------------------------
类printf函数的最大的特点就是，在函数定义的时候无法知道函数实参的数目和类型。

对于这种情况，可以使用省略号指定参数表。

带有省略号的函数定义中，参数表分为两部分，前半部分是确定个数、确定类型的参数，第二部分就是省略号，代表数目和类型都不确定的参数表，省略号参数表中参数的个数和参数的类型是事先的约定计算出来的，每个实参的地址（指针）是根据确定参数表中最后一个实参的地址算出来的。

这里涉及到函数调用时的栈操作。函数栈的栈底是高地址，栈顶是底地址。在函数调用时函数实参是从最后一个参数（最右边的参数）到第一个参数（最左边的参数）依次被压入栈顶方向。也就是说函数调用时，函数实参的地址是相连的，并且从左到右地址是依次增加的。

攻击原理
--------------------------------
因为类printf函数中省略号参数表中参数的个数和类型都是由类printf函数中的那个格式化字符串来决定的，所以攻击者可以利用编程者的疏忽或漏洞，巧妙构造格式化字符串，达到攻击目的。

举一个简单的例子，如果想输出一个字符串，可以使用 ``printf("%s", str)`` 或者 ``printf(str)`` 。但第二种写法是有漏洞的，如果攻击者输入 ``%d`` ``%x`` 等格式化字符，那么一个变量的参数值就从堆栈中取出。

ref
--------------------------------

格式化字符串攻击原理及示例 http://blog.csdn.net/immcss/article/details/6267849
