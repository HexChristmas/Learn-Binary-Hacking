黑灰白盒
========================================

黑盒
----------------------------------------
黑盒Fuzz是一个有效和找到漏洞的简单方法，和白盒不同的是，黑盒Fuzz不关心程序执行的状态，认为程序是一个黑盒。其直接产生输入然后尝试找到结果。黑盒Fuzz也常被称为是数据驱动的Fuzz，大部分传统Fuzzer都是黑盒的。

白盒
----------------------------------------
白盒Fuzz在测试之前通常会先对应用进行分析，获取一定的信息来辅助其创建的输入能在应用程序中发现崩溃。 

其通常遇到的问题是一个应用程序一般有有许多分支，然后形成许多可能的执行流。不过如果有了很大的测试空间，就有可能创建几乎无限的输入来遍历所有的执行流。一般白盒Fuzz会试图创造在更少的输入的同时来尽量覆盖更多的路径。

但是由于执行流程过多和复杂的约束，白盒Fuzz在应用程序中可能并不精确。

灰盒
----------------------------------------
在白盒和黑盒之后，一些研究者提出了灰盒Fuzz，结合黑盒和白盒两种方式进行Fuzz。使用黑盒Fuzz进行执行，也一定程度上使用轻量的白盒方式为黑盒提供反馈。比单纯的白盒Fuzz更轻量级，比黑盒Fuzz更有效率。

总结
----------------------------------------
通常来说，越偏向黑盒的测试方法，执行测试的速度更快，找到的漏洞会相对浅。越偏向白盒的方法，执行测试的速度会更慢，但是找到的漏洞会更深一些。
