Windows
========================================

运行模式
----------------------------------------
Windows支持Intel x86/x64 的两种处理器模式内核模式（Ring 0）和用户模式（Ring 3）。

内核模式下的代码可以访问所有的内存空间；可以直接操纵硬件。用户模式下的代码无权访问系统空间的内存页面；无法直接操纵硬件。用户模式向内核模式的切换是受控制的。

基本模块
----------------------------------------
Windows操作系统内核模式下的基本模块包含Windows执行体、Windows内核体、设备驱动程序、窗口和图形系统、硬件抽象层。

其中Windows执行体是Windows内核体的上层接口，包含了基本的操作系统服务，如进程与线程管理、内存管理、I/O管理、网络连接、进程间通信以及安全服务。

Windows内核体实现与硬件体系结构支持的代码，实现底层的操作系统功能，如线程调度 、中断和异常分发处理、多处理器同步等。

设备驱动程序包括硬件设备驱动程序、文件系统与网络设备驱动程序。

窗口和图形系统即Win32k.sys（Windows子系统的内核模式部分），实现了图形用户界 面（GUI）函数，包括窗口的处理、绘制等。

硬件抽象层即Hal.dll文件，用于屏蔽Windows内核、驱动程序与平台硬件差异性的底 层代码。

系统进程
----------------------------------------
- Csrss.exe
    - Windows子系统进程，即客户端/服务器运行进程
- Smss.exe
    - 会话（Session）管理器，系统启动时第一个运行的进程
- Winlogon.exe
    - 处理交互式登录
- Services.exe
    - 服务控制管理器，负责启动和、停止、暂停、恢复服务
- Svchost.exe
    - 共享进程服务的宿主进程
- Lsass.exe
    - 本地安全授权子系统，验证用户登录、授权和审计

管理机制
----------------------------------------
Windows主要使用注册表和服务来管理。

注册表（Registry）是包含操作系统和其它软件的所有设置和配置相关数据的目录。

注册表的逻辑结构类似于磁盘上的文件系统。注册表包含了键（key）和值（value）。其中键类似文件系统中的目录，而值就像文件，键可以包含子键（subkey）和值。值中存储着配置数据，数据有多种类型。最顶层的键称为根键（root key）。

服务（Services）程序是后台运行的进程，常用来执行特定的任务，不需要和用户进行交互。比如自动更新服务、后台智能传输服务、事件日志服务等。

服务程序受Service Control Manager（SCM，即services.exe进程）所控制，其服务程序的配置数据位于 ``HKLM\System\CurrentControlSet\Services`` 。

进程与线程
----------------------------------------

进程
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
进程（Process）是一个应用程序运行的实例，包含以下一些基本组件：私有虚拟地址、可执行体程序、被操作系统分配的一份资源句柄（Handles）列表、访问控制令牌（Token）、进程标识号一个或多个线程。

访问控制令牌是用以唯一的标识所有者及其所属组以及和该进程相关联的特权（Privilege）信息。

进程创建步骤分为七步：

- 转换并校验参数和标记
- 打开可执行映像文件（.exe）
- 创建Windows执行体进程对象
- 创建初始线程（栈，上下文和 执行体线程对象等）
- 通知Windows子系统初始化 了一个进程
- 开始运行初始线程。（除非进程创建的时候被挂起）
- 在新进程和线程的上下文空间中，完成地址空间的初始化（ 比如加载必需的DLL文件）并开始执行程序

线程
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
线程（Thread）是CPU调度执行的基本单元，其包含CPU状态、两个栈、线程本地存储（TLS）、线程标识号和访问控制令牌。

线程的两个栈分别用于内核模式和用户模式。线程本地存储（TLS）包含一个私有存储空间，用来保存子系统、运行时库以及DLL文件等。

访问控制令牌（Access Token），用以唯一的标识所有者及其所属组以及和该线程相关联的特权（Privilege）信息

防护机制
----------------------------------------

DEP
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DEP（Data Executive Protection，数据执行保护）从Windows XP SP2开始引入，缺省仅为基本的Windows程序和服务启用DEP。

DEP的基本原理是将数据所在的内存页标记为不可执行，当程序产生溢出，恶意代码试图在数据段执行指令时，CPU会产生异常而不去执行指令。

实现DEP机制需要CPU的支持。为此AMD公司推出了EVP（enhanced virus protection）技术，Intel推出了EDB （execute disable bit）技术，这些技术在原理上均是在内存的页面表（Page Table）中加入一个特殊的标 识位（NX/XD）来标识是否允许在该页上执行指令。

DEP有四种可选参数：

– Optin：对于大多数用户版本的操作系统来说，默认仅将DEP保护是仅仅为一些基本的Windows程序和服务启用。该模式可被应用程序动态关闭
– Optout：系统为所有在所选列表外的程序和服务启用DEP，这种模式下，DEP仍可被应用程序关闭。该模式多用于服务器版本的操作系统，如Windows Server 2003/2008
– AlwaysOn：对所有的进程启用DEP的保护，不存在排除列表。该模式下，DEP不可以被关闭，这是一种仅仅在64位操作系统上才能实现的工作模式，这在最大限度上保证了所有程序都能够抵御常见的数据溢出攻击
– AlwaysOff：对所有的进程都禁用了DEP，DEP也不能被应用程序动态开启，这该模式一般只有在特殊场合才会使用

ASLR
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ASLR（ Address Space Layout Randomization， 内存地址空间布局随机化）在加载程序到内存空间时随机化各个模块的起始加载地址，防止攻击者定位攻击指令代码的位置。

ASLR需要操作系统及应用程序的双重支持才能发挥作用，支持ASLR的程序在PE头中会设置IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE标识表明其支持ASLR。

ASLR主要影响的部分模块随机化、堆栈随机化和PEB/TEB随机化。模块随机化指系统将PE文件映射到内存时，对其加载基地址进行随机化处理， 基地址在系统启动时确定，系统重启后会变化。堆栈随机化指每次程序加载后，其内存空间中堆、栈的基址都会发生变化。于是内存中的变量所在的地址也会发生变化。

ASLR在Windows Vista/7引入实现，但机制尚不完善，攻击者还能在一定范围内进行漏洞利用。比如使用堆喷射、利用没有随机化的系统或软件的EXE/DLL等方式。

EPM
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
EPM （Enhanced Protection Mode，增强保护模式）也叫做“沙盒模式”（Sandbox Mode），本质上是隔离进程和降低权限。该机制Windows 8的IE 10开始引入，从Windows 8.1开始默认启用。

PatchGuard
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PatchGuard是在64位版本的Windows操作系统中提供的新功能，用于保护操作系统的核心结构，防止他们被其他程序修改。

其对系统服务描述符表SSDT（System Service Descriptor Table）、全局描述符表GDT（Global Descriptor Table）和中断描述符表IDT（Interrupt Descriptor Table）、系统映像System images（ntoskrnl.exe, ndis.sys, hal.dll）等进行保护。

PatchGuard处在系统任务的一个较高层面上，通过每隔一定时间进行一些固定的检查来确定这些系统关键内容是否更改。这些检查主要通过将核心内容与缓存中已保存的已知正确的备份进行对比，检测间隔大约为5-10分钟左右的某一随机选择时间。

PatchGuard的缺点在于缺乏本地硬件水平的支持，只能通过轮询的形式，而不是采用事件驱动或硬件驱动的形式。

Code Signing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Code Signing（代码签名）检查机制需要加载到系统内核中运行的驱动程序必须有数字签名以保证 其代码的完整性，否则系统内核就不加载该驱动程序。

代码完整性检测被加载到内核中的驱动程序或系统文件是否已经被签名，或正在运行系统管理员账户权限的系统文件是否已被恶意软件篡改。在基于x64版本的操作系统下，内核模式的驱动程序必须进行数字签名后才能被加载。

参考链接
----------------------------------------
- `windows kernel exploit tutorial <https://www.redog.me/tags/windows-kernel-exploit-tutorial/>`_
